# name: Create a new PQG table
# key: pqg-newtable
# expand-env: ((yas/indent-line nil))
# --
=========${1:$(make-string (string-width text) ?\=)}=${2:$(make-string (string-width text) ?\=)}=
 Tabella ${1:schema}.${2:tablename}
=========${1:$(make-string (string-width text) ?\=)}=${2:$(make-string (string-width text) ?\=)}=

Generatore
----------

.. patchdb:script:: Generatore $1.$2_ids
   :description: Creazione della sequenza per generare gli ID di $1.$2
   :depends: Schema $1

   create sequence $1.$2_ids


.. patchdb:script:: Permessi generatore $1.$2_ids
   :description: Impostazione permessi di utilizzo del generatore $1.$2_ids
   :depends: Generatore $1.$2_ids

   revoke all privileges on sequence $1.$2_ids from public
   ;;
   grant all privileges on sequence $1.$2_ids to group pqg_dbas
   ;;
   grant usage, select, update privileges on sequence $1.$2_ids to group pqg_users


Tabella
-------

.. patchdb:script:: Tabella $1.$2
   :description: Creazione della tabella $1.$2
   :depends: Schema $1,
             Tabella public.TimeStamped

   create table $1.$2 (
       ${3:primarykey} ${4:$$(yas/choose-value '("smallid_t" "largeid_t" "stringid_t"))} not null,
       $0

       constraint pk_$2 primary key ($3),
   ) inherits (public.TimeStamped)


.. patchdb:script:: Permessi tabella $1.$2
   :description: Impostazione permessi di utilizzo della tabella $1.$2
   :depends: Tabella $1.$2

   revoke all privileges on table $1.$2 from public
   ;;
   grant all privileges on table $1.$2 to group pqg_dbas
   ;;
   grant select, insert, delete, update on table $1.$2 to group pqg_users


Gestione timestamp
------------------

.. patchdb:script:: Funzione inserimento $1.$2
   :description: Inizializzazione di un nuovo record in $1.$2
   :depends: Tabella $1.$2,
             Generatore $1.$2_ids,
             Funzione auth.user()

   create or replace function $1.initialize_$2()
   returns trigger as $$
   begin
     if new.created_on is NULL then
       new.created_on := 'now';
     end if;
     if new.created_by is NULL then
       new.created_by := (select user_id from auth.user());
     end if;
     if new.$3 is null or new.$3 = 0 then
       new.$3 := nextval('$1.$2_ids');
     end if;
     return new;
   end;
   $$ language plpgsql;


.. patchdb:script:: Trigger inserimento $1.$2
   :description: Trigger all'inserimento di un nuovo record in $1.$2
   :depends: Tabella $1.$2,
             Funzione inserimento $1.$2

   create trigger trg_ins_ts_$1_$2
     before insert
     on $1.$2
     for each row
       execute procedure $1.initialize_$2();


.. patchdb:script:: Trigger aggiornamento $1.$2
   :description: Trigger all'aggiornamento di un record in $1.$2
   :depends: Tabella $1.$2,
             Funzione public.update_timestamp()

   create trigger trg_upd_ts_$1_$2
     before update
     on $1.$2
     for each row
       execute procedure public.update_timestamp();


Indici
------

newindex

Chiavi esterne
--------------

.. patchdb:script:: FKs $1.$2->auth.users
   :description: Foreign keys da $1.$2 su auth.users
   :depends: Tabella $1.$2,
             Tabella auth.users

   alter table $1.$2
          add constraint fk_$2_created_by foreign key (created_by)
              references auth.users (user_id)
                         on update cascade
                         on delete set null,
          add constraint fk_$2_changed_by foreign key (changed_by)
              references auth.users (user_id)
                         on update cascade
                         on delete set null
